//
// Typography mixins
//

@mixin mdc-typography-base {
  font-family: $typography-font-family;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

@mixin mdc-typography($style) {
  $style-props: map-get($typography-styles, $style);

  @if not map-has-key($typography-styles, $style) {
    @error "Invalid style specified! Choose one of #{map-keys($typography-styles)}";
  }

  @include mdc-typography-base;

  font-size: map-get($style-props, font-size);
  font-weight: #{map-get($style-props, font-weight)};
  letter-spacing: map-get($style-props, letter-spacing);
  line-height: map-get($style-props, line-height);
  text-decoration: map-get($style-props, text-decoration);
  text-transform: map-get($style-props, text-transform);
}

@mixin mdc-typography-adjust-margin($style) {
  margin: map-get(map-get($typography-styles, $style), margin);
}

// Element must be `display: block` or `display: inline-block` for this to work.
@mixin mdc-typography-overflow-ellipsis {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.txt {
  @include mdc-typography-base;
}

@each $style in map-keys($typography-styles) {
  .txt--#{$style} {
    @include mdc-typography($style);
  }

  .txt--margin.txt--#{$style} {
    @include mdc-typography-adjust-margin($style);
  }
}

hr {
  margin-top: 1rem;
  margin-bottom: 1rem;
  border: 0;
  border-top: 1px dashed rgba(0, 0, 0, .1);
}

blockquote {
  @extend .txt--caption;
  @extend .txt--margin;

}

pre {
  display: block;
  margin-top: 0;
  margin-bottom: 1rem;
  color: rgba(0, 0, 0, 0.4);
  overflow: auto;
  @extend .txt--body1;

  & code {
    padding: 1rem;
    font-size: inherit;
    color: inherit;
    background: #fff1a5;
    border-radius: 0;
  }
}

dl, ul, ol {
  margin-top: 0;
  margin-bottom: 1rem;
  padding-left: 2rem;
}