/**
 *  MiXiNs
 *  v 1.0
 */

//Before & After Pseudo Elements
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

//font behavior
@mixin typography-base {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

@mixin typography($style, $display: false) {
  $style-props: '' !default;
  @if ($display) {
    $style-props: map-get($font-tag-display, $style);
  } @else {
    $style-props: map-get($font-tag, $style);
  }

  @include typography-base;

  font-family: map-get($style-props, font-family);
  font-size: map-get($style-props, font-size);
  font-weight: #{map-get($style-props, font-weight)};
  letter-spacing: map-get($style-props, letter-spacing);
  line-height: map-get($style-props, line-height);
  text-decoration: map-get($style-props, text-decoration);
  text-transform: map-get($style-props, text-transform);
}

@mixin typography-adjust-margin($style, $display: false) {
  @include typography-base;
  @include typography($style, $display);
  @if ($display) {
    margin: map-get(map-get($font-tag-display, $style), margin);
  } @else {
    margin: map-get(map-get($font-tag, $style), margin);
  }
}

//Media Query
$breakpoints: (
        "phone": 576px,
        "tablet": 768px,
        "desktop": 992px,
        "desktop-wide": 1200px,
);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

/* animation */
@mixin animate($duration: .25s) {
  -webkit-transition: all $duration cubic-bezier(.550, .055, .675, .190);
  transition: all $duration cubic-bezier(.550, .055, .675, .190);
}


