/**
 *  MiXiNs
 * pseudo elements, media queries, transitions, hover, border-radius
 *  v 1.0
 */

//Before & After Pseudo Elements
@mixin pseudo($content: '', $display: block, $pos: absolute) {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

//  Transition
@mixin transition($transition...) {
  @if length($transition) == 0 {
    transition: $transition-base;
  } @else {
    transition: $transition;
  }
}

//  Hover behaviour
@mixin hover {
  &:hover {
    @content;
  }
}

//  Hover behaviour
@mixin hover-mobile($mq) {
  &:hover {
    @content;
  }

  & {
    @include mq($mq, max) {
      @content;
    }
  }
}

//share content among hover and focus
@mixin hover-focus {
  @include hover {
    @content;
  }

  &:focus,
  &:hover {
    @content;
  }

}

//share content among plain, hover and focus
@mixin plain-hover-focus {
  @include hover {
    @content;
  }

  &,
  &:focus,
  &:hover {
    @content;
  }

}

//share content among active, hover and focus
@mixin hover-focus-active {

  @include hover {
    @content;
  }

  &:focus,
  &:active,
  &.active,
  &:hover {
    @content;
  }
}

// Border-radius
@mixin border-radius($radius: $border-radius) {
  border-radius: $radius;
}

@mixin border-top-radius($radius) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin border-right-radius($radius) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}

@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

//  Box-shadow
@mixin box-shadow($shadow) {
  box-shadow: $shadow;
}


